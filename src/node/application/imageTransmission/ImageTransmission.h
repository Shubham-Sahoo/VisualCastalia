// Universidade Estadual de Feira de Santana
// Author: Lucas Vinicius dos Santos Assis
// Application based on ThrouthputTest from Castalia

// Application functionalities?
// 1 - Get an image from the especific origin directory
//		The default name of directory is "originalImages". The user can change it.
//		The name of each image for the simulation must to be given by the user
//		The default format of image is ".png". The user can change it.
// 2 - Split each image specified by the user according its size into image packets.
// 3 - Send the image packets through the network to the sink node.
// 4 - Store related packets together (according the source image and source node).
// 5 - When all the data from an image is received, the application joins this data and saves
//		it in the result image directory. The user can verify the integrity of the 
//		images after pass through the network. This process is repeated for each image

#ifndef _IMAGETRANSMISSIONNODE_H_
#define _IMAGETRANSMISSIONNODE_H_

// Turn This module an Application Module
#include "VirtualApplication.h"
// Image Packet Header
#include "ImagePacket_m.h"
// Image Manager Header
#include "ImageManager.h"
// Sink node manager header
#include "SinkNodeManager.h"

using namespace std;

enum ImageTransmissionTimers {
	SEND_PERIODIC_IMG_PKT = 1,
	SEND_BURST_IMG_PKT = 2,
	GET_A_NEW_IMAGE = 3
};
// max_packet_spacing - related with img packet sending mode burst
// and castalia timers buffer overflow
const double max_packet_spacing = 0.007;

class ImageTransmission: public VirtualApplication 
{
 private:
 	// Size of image packet
 	int imgPckSize;
 	// Size of image packet header
 	int imgPckHeaderSize;
 	// The address of the next node
	string nextRecipient;
	// The total number of packets sent from this node
	int currSentSampleSN;
	// The number of current image packet related with the current image
	// sent through the network
	int currentImagePacket;
	// The folder of the original images. 
	// default ("originalImages").
	// Use "" to the current directory
	string originalImagesFolder;
	// The folder whose sink saves the received images
	string receivedImagesFolder;
	// How many images from originalImagesFolder must to be sent
	// through the network
	int numImageSources;
	// The default image format, default (".jpg")
 	string imageFormat;
 	// The number of the current image sent through the network
	int currentImageSource;
	// The frequency (image/second) to send images through the network
	double imageFrequency;
	// Spacing among images according the imageFrequency
	double image_spacing;
	// Delay to start the application in the node
	double startupDelay;
	// According the amount of packet generated by the segmented image,
	// the packet_spacing suits its size to stay correctly related with 
	// imageFrequency
	double packet_spacing;
	// It provides all the image handling of the application
	ImageManager imageManager;
	// When the node is sink node, it works to provide the correct receipt of
	// the image packets and aggregates the related ones. Then it pass the image
	// buffers (to be transformed into image file) to ImageManager.
	SinkNodeManager sinkNodeManager;
	// The set number indicates how many images
	// the node sent until the creation of this pkt
	int imageSetNumber;

	// Indicates the way to send packets, burst (value = 1) or periodic (value = 2)
	int imgPckSendingMode;

	// The application generates random images
	bool selfGeneratedImg;
	// Default Height of generated random images
	int imgHeight;
	// Default Width of generated random images
	int imgWidth;
	// It defines if the images in simulation are colored
	bool useColoredImages;
	// How many image packets a single image will generate
	int howManyImagePkts;

	// How many images were sent by a single node
	int howManyImagesSent;

	// The name of the current image
	string currentImageName;

	// Time of current snapshot
	simtime_t currentSnapshotTime;
	// Variables used to write traces into files
	//======================
	ofstream latencyTrace;
	ofstream internalTrace;
	//======================

	string runningSimulation;

	// It performs VisualCastalia traces
	// ImageTransmissionTraces visualCastaliaTrace;


	// FUNCTIONS
	// ImageTransmission function
	void folderCheck();
	void folderCheck(int nodeID);
	// Function that creates an img packet with the buffer fragment inserted
	void createImgPck(vector<unsigned char> bufferFragment);

	// //===================================
	// // Related with latency traces
	// //===================================
	// void writeMetricsTrace(string infoToTrace, string fileName);
	//===================================

 protected:
 	// Castalia related Functions
	void startup();
	void timerFiredCallback(int);
	void fromNetworkLayer(ApplicationPacket *, const char *, double, double);
	void finishSpecific();
	void handleRadioControlMessage(RadioControlMessage *);


};

#endif				// _IMAGETRANSMISSION_APPLICATIONMODULE_H_
