# ****************************************************************************
# Author: Lucas Vinicius dos Santos Assis
# ***************************************************************************/
# Based on valuePropagation simulation
[General]

# =============================================
# Always include the main Castalia.ini file
# =============================================
include ../Parameters/Castalia.ini

# Setting the simulation execution in simulation time

SN.field_x = 100		# meters
SN.field_y = 100		# meters

SN.numNodes = 5

SN.node[*].Communication.Radio.RadioParametersFile = "../Parameters/Radio/CC2420.txt"
SN.node[*].Communication.Radio.TxOutputPower = "-10dBm"
SN.node[*].Communication.RoutingProtocolName = "BypassRouting"
#SN.node[*].Communication.MACProtocolName = "BypassMAC"

# Ideal wireless channel scenary
SN.wirelessChannel.sigma = 0
SN.wirelessChannel.bidirectionalSigma = 0
SN.node[*].Communication.Radio.mode = "IDEAL"

# TMAC parameters

SN.node[*].Communication.MACProtocolName = "TMAC"
#This number of transmission attempts of a single unicast packet that TMAC will perform. A
#transmission is considered successful only if acknowledgment packet is received from the
#destination node. Sending an RTS packet is also considered as a transmission attempt. Note
#that this parameter does not apply to broadcast packets.
SN.node[*].Communication.MAC.maxTxRetries = 2
#The length of each frame period for all nodes (in milliseconds). Nodes try to synchronise the
#start and end of each frame with a global schedule (with the possibility of more than one
#schedules). Note that this refers to the duration of the whole frame; the active and inactive
#portions of each frame are determined dynamically and individually for each node.
SN.node[*].Communication.MAC.frameTime = 610
#The duration of contention interval (i.e. interval where transmissions of randomized), in
#milliseconds, for any transmission attempt. The major effect of this parameter is to avoid
#transmission interference from neighbouring nodes.
SN.node[*].Communication.MAC.contentionPeriod = 10
#The duration of listen timeout in milliseconds (can also be called activation timeout). This
#parameter defines the amount of time which has to pass without any activity on the wireless
#channel in order for a node to go to sleep in the current frame.
SN.node[*].Communication.MAC.listenTimeout = 5
#The duration of timeout for expecting a reply from another node (in milliseconds). This reply
#may be a CTS packet or an ACK packet. If no reply is received after this time interval, then
#transmission attempt is considered failed and transmission attempt counter is decremented.
SN.node[*].Communication.MAC.waitTimeout = 5
#The interval between broadcasting synchronization packets (in seconds). The value of this
#parameter is directly related to the clock drift of nodes in the simulation network. Our
#experiments showed that 40 seconds is an adequate value to use with current clock drift
#model of Castalia.
SN.node[*].Communication.MAC.resyncTime = 6
#If this value is set to 1 (true), TMAC will attempt to extract information from higher layers
#(i.e., application module parameter isSink) in order to find out whether the current node is
#marked as 'sink'.
#This parameter allows 'sink' nodes to avoid contention interval when creating a
#synchronisation schedule for the network, thus allowing for faster synchronisation, and
#consequently, better throughput (especially if packets need to be sent early in the simulation)
SN.node[*].Communication.MAC.allowSinkSync = true
#This parameter refers to the use of future request to send (FRTS) as defined by the creators of
#TMAC algorithm. In our current TMAC implementation we do not provide support for this parameter 
#as we consider it to be addressing a specific issue, while not being part of the core TMAC algorithm
SN.node[*].Communication.MAC.useFrts = false
#This parameter is an additional feature, which was not originally proposed in TMAC. It
#allows to turn off RTS and CTS packets, thus limiting any transmission to a simple DATA -
#ACK exchange between nodes. We find this parameter useful for situations where only small
#packets are being sent, thus making it unnecessary to actually reserve the channel for
#transmission (since reservation will take more time than transmission itself).
SN.node[*].Communication.MAC.useRtsCts = true
#Another extra parameter that allows us to turn off the activation timeout extension. Since the
#flexible active period is the trademark enhancement of TMAC over SMAC, by disabling it
#and defining appropriate listen interval (10% of the whole frame) we are essentially
#implementing SMAC. Indeed we provide an ini file to include in your simulations that defines
#the appropriate parameters of the TMAC module to emulate the SMAC protocol.
SN.node[*].Communication.MAC.disableTAextension = false
#Use conservative activation timeout, will ensure that MAC stays awake for at least 15 ms
#after any activity on the radio.
SN.node[*].Communication.MAC.conservativeTA = true
#Choose a collision resolution mechanism from those. Possible values are:
#0 - Retry contention immediately after losing the channel,
#1 - Retry only when heard a CTS or RTS
#2 - Retry only in the next frame
SN.node[*].Communication.MAC.collisionResolution = 0

# These tests use big packets (2kb) to show interference clearly
# This requires to set the max pkt size in all communication layers
SN.node[*].Communication.Routing.maxNetFrameSize = 1000
SN.node[*].Communication.MAC.maxMACFrameSize = 1000
SN.node[*].Communication.Radio.maxPhyFrameSize = 1000

# Também vamos prestar atenção no modelo de colisão do Castalia:
# 0-> No interference
# 1-> Simple interference
# 2-> Additive interefence (default)
# 3-> Advanced interference (not implemented)
# be carefull, with interferences, packet losses can occur and there is no retransmission mechanism right now
SN.node[*].Communication.Radio.collisionModel = 2


SN.node[*].ApplicationName = "ImageTransmission"
SN.node[*].Application.originalImagesFolder = "originalImages"
SN.node[*].Application.collectTraceInfo = false
SN.node[*].Application.imageFormat = "jpg"

SN.node[*].Application.packetHeaderOverhead = 170
SN.node[*].Application.constantDataPayload = 500


# Indicates the way to send packets, periodic (value = 1) or burst (value = 2)
SN.node[*].Application.imgPckSendingMode = 1

SN.node[*].Application.startupDelay = 0


[Config Teste1]

SN.node[*].Application.configurationName = "${datetime}"

SN.node[0].xCoor = 30
SN.node[0].yCoor = 10
SN.node[1].xCoor = 20
SN.node[1].yCoor = 10
SN.node[2].xCoor = 10
SN.node[2].yCoor = 10
SN.node[3].xCoor = 0
SN.node[3].yCoor = 5
SN.node[4].xCoor = 100
SN.node[4].yCoor = 100

SN.node[1].Application.nextRecipient = "0"
SN.node[2].Application.nextRecipient = "1"
SN.node[3].Application.nextRecipient = "2"

SN.node[3].Application.numImageSources = 3
SN.node[3].Application.imageFrequency = 0.5
SN.node[*].Application.receivedImagesFolder = "receivedImages"

[Config Teste2]

SN.node[*].Application.configurationName = "${datetime}"

SN.node[0].xCoor = 30
SN.node[0].yCoor = 10
SN.node[1].xCoor = 20
SN.node[1].yCoor = 10
SN.node[2].xCoor = 10
SN.node[2].yCoor = 10
SN.node[3].xCoor = 0
SN.node[3].yCoor = 5
SN.node[4].xCoor = 100
SN.node[4].yCoor = 100

SN.node[1].Application.nextRecipient = "0"
SN.node[2].Application.nextRecipient = "1"
SN.node[3].Application.nextRecipient = "2"

SN.node[3].Application.numImageSources = 3
SN.node[3].Application.imageFrequency = 1
SN.node[*].Application.receivedImagesFolder = "receivedImages2"

[Config Teste3]

SN.node[*].Application.configurationName = "${datetime}"

SN.node[0].xCoor = 30
SN.node[0].yCoor = 10
SN.node[1].xCoor = 20
SN.node[1].yCoor = 10
SN.node[2].xCoor = 10
SN.node[2].yCoor = 10
SN.node[3].xCoor = 0
SN.node[3].yCoor = 5
SN.node[4].xCoor = 0
SN.node[4].yCoor = 15

SN.node[1].Application.nextRecipient = "0"
SN.node[2].Application.nextRecipient = "1"
SN.node[3].Application.nextRecipient = "2"
SN.node[4].Application.nextRecipient = "2"

SN.node[3].Application.numImageSources = 3
SN.node[3].Application.imageFrequency = 0.5

SN.node[4].Application.numImageSources = 3
SN.node[4].Application.imageFrequency = 0.5
SN.node[*].Application.receivedImagesFolder = "receivedImages3"

[Config Teste4]

SN.node[*].Application.configurationName = "${datetime}"

SN.node[0].xCoor = 30
SN.node[0].yCoor = 10
SN.node[1].xCoor = 20
SN.node[1].yCoor = 10
SN.node[2].xCoor = 10
SN.node[2].yCoor = 10
SN.node[3].xCoor = 0
SN.node[3].yCoor = 5
SN.node[4].xCoor = 0
SN.node[4].yCoor = 15

SN.node[1].Application.nextRecipient = "0"
SN.node[2].Application.nextRecipient = "1"
SN.node[3].Application.nextRecipient = "2"
SN.node[4].Application.nextRecipient = "2"


SN.node[3].Application.numImageSources = 3
SN.node[3].Application.imageFrequency = 1

SN.node[4].Application.numImageSources = 3
SN.node[4].Application.imageFrequency = 1

SN.node[*].Application.receivedImagesFolder = "receivedImages4"

[Config 1]
sim-time-limit = 3600s

[Config 2]
sim-time-limit = 7200s

[Config 3]
sim-time-limit = 10800s

[Config 4]
sim-time-limit = 14400s

[Config 5]
sim-time-limit = 18000s

[Config 6]
sim-time-limit = 21600s

[Config 7]
sim-time-limit = 25200s

